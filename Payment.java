
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
//import java.sql.Date;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;


public class Payment extends javax.swing.JFrame {
    
    LocalDateTime ld=LocalDateTime.now();
    LocalTime lt=LocalTime.now();
    LocalDate ldate=LocalDate.now();
//    static Connection con=null;
//   Statement stmt=null;
//   ResultSet rs=null;
//   PreparedStatement pstmt=null;
   
    public Payment() {
        initComponents();
        
        setExtendedState(JFrame.MAXIMIZED_BOTH);
           SpinnerDateModel datemodel=new SpinnerDateModel(new Date(),null,null,java.util.Calendar.DAY_OF_MONTH);
                pay_date.setModel(datemodel);
                  app_date.setModel(datemodel);
           JSpinner.DateEditor dateEditor=new JSpinner.DateEditor(pay_date, "dd/MM/yyyy");
                pay_date.setEditor(dateEditor);
           JSpinner.DateEditor dateEditor2=new JSpinner.DateEditor(app_date, "dd/MM/yyyy");
                app_date.setEditor(dateEditor2);
                
        jTabbedPane1.setSelectedIndex(4);
        
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        rgdate_txt.setText(""+ld);
        date_of_record.setText("" + ldate);
        Date_of_inventory.setText("" + ldate);
       // con= DatabaseConnection.getConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        patreg_btn = new javax.swing.JButton();
        appser_btn = new javax.swing.JButton();
        bill_btn = new javax.swing.JButton();
        heal_record = new javax.swing.JButton();
        staff_record = new javax.swing.JButton();
        exit_btn = new javax.swing.JButton();
        invent_btn = new javax.swing.JButton();
        jLabel77 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        app_id = new javax.swing.JTextField();
        p_id = new javax.swing.JTextField();
        d_id = new javax.swing.JTextField();
        status_appoint = new javax.swing.JTextField();
        submit_app = new javax.swing.JButton();
        new_app = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        update_app = new javax.swing.JButton();
        delete_app = new javax.swing.JButton();
        search_app = new javax.swing.JButton();
        app_date = new javax.swing.JSpinner();
        p_name_appoint = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        d_name_appoint = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        doc_special_app = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        appointment_type = new javax.swing.JComboBox<>();
        appointment_time = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        id_health = new javax.swing.JTextField();
        doctor_id_health = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        symptoms_health = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        treat_health = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        allergies_health = new javax.swing.JTextArea();
        submit_health = new javax.swing.JButton();
        new_health = new javax.swing.JButton();
        delete_health = new javax.swing.JButton();
        update_health = new javax.swing.JButton();
        search_health = new javax.swing.JButton();
        jLabel66 = new javax.swing.JLabel();
        patient_name_health = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        patient_age_health = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        follow_date_health = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        vital_signs_health = new javax.swing.JTextArea();
        jLabel70 = new javax.swing.JLabel();
        status_health_record = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        date_of_record = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        payid_txt = new javax.swing.JTextField();
        patientid_txt = new javax.swing.JTextField();
        amount_txt = new javax.swing.JTextField();
        stat_pay = new javax.swing.JTextField();
        submit_pay = new javax.swing.JButton();
        new_pay = new javax.swing.JButton();
        update_pay = new javax.swing.JButton();
        search_pay = new javax.swing.JButton();
        pay_mode = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        done_pay = new javax.swing.JButton();
        jLabel52 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        card_type = new javax.swing.JTextField();
        name_card = new javax.swing.JTextField();
        card_no = new javax.swing.JTextField();
        cvv_no = new javax.swing.JTextField();
        expiry_date = new javax.swing.JTextField();
        pay_card = new javax.swing.JButton();
        jLabel75 = new javax.swing.JLabel();
        pay_id_card = new javax.swing.JTextField();
        jLabel76 = new javax.swing.JLabel();
        payc_id = new javax.swing.JTextField();
        del_pay = new javax.swing.JButton();
        pay_date = new javax.swing.JSpinner();
        jLabel54 = new javax.swing.JLabel();
        amtpaid_pay = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        outst_pay = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        sl2 = new javax.swing.JLabel();
        sl3 = new javax.swing.JLabel();
        sl4 = new javax.swing.JLabel();
        sl5 = new javax.swing.JLabel();
        doctor_id = new javax.swing.JTextField();
        doctor_name = new javax.swing.JTextField();
        doctor_role = new javax.swing.JTextField();
        doctor_dept = new javax.swing.JTextField();
        doctor_cont = new javax.swing.JTextField();
        submit_staff = new javax.swing.JButton();
        new_staff = new javax.swing.JButton();
        update_staff = new javax.swing.JButton();
        delete_staff = new javax.swing.JButton();
        search_staff = new javax.swing.JButton();
        sl6 = new javax.swing.JLabel();
        doctor_experience = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        id_txt = new javax.swing.JTextField();
        P_name_txt = new javax.swing.JTextField();
        male_btn = new javax.swing.JRadioButton();
        female_btn = new javax.swing.JRadioButton();
        other_btn = new javax.swing.JRadioButton();
        age_txt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        address_txt = new javax.swing.JTextArea();
        phone_txt = new javax.swing.JTextField();
        email_txt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        mhis_txt = new javax.swing.JTextArea();
        rgdate_txt = new javax.swing.JTextField();
        submit_btn = new javax.swing.JButton();
        new_btn = new javax.swing.JButton();
        update_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        search_btn = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        id_med = new javax.swing.JTextField();
        item_med = new javax.swing.JTextField();
        quant_med = new javax.swing.JTextField();
        supplier_med = new javax.swing.JTextField();
        lastup_med = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        cost_med = new javax.swing.JTextField();
        submit_med = new javax.swing.JButton();
        new_med = new javax.swing.JButton();
        update_med = new javax.swing.JButton();
        delete_med = new javax.swing.JButton();
        search_med = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        categ_invent = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        manufact_invent = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        status_med = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        Date_of_inventory = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CONTROLLER");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 59, 436, 52));

        patreg_btn.setBackground(new java.awt.Color(204, 255, 0));
        patreg_btn.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        patreg_btn.setText("Patient Registration");
        patreg_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patreg_btnActionPerformed(evt);
            }
        });
        jPanel1.add(patreg_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 212, 331, 48));

        appser_btn.setBackground(new java.awt.Color(204, 255, 0));
        appser_btn.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        appser_btn.setText("Appointment Service");
        appser_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appser_btnActionPerformed(evt);
            }
        });
        jPanel1.add(appser_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 296, -1, 48));

        bill_btn.setBackground(new java.awt.Color(204, 255, 0));
        bill_btn.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        bill_btn.setText("Billing Service");
        bill_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bill_btnActionPerformed(evt);
            }
        });
        jPanel1.add(bill_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 378, 331, 48));

        heal_record.setBackground(new java.awt.Color(204, 255, 0));
        heal_record.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        heal_record.setText("Health Record");
        heal_record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heal_recordActionPerformed(evt);
            }
        });
        jPanel1.add(heal_record, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 462, 331, 48));

        staff_record.setBackground(new java.awt.Color(204, 255, 0));
        staff_record.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        staff_record.setText("Add Doctor");
        staff_record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_recordActionPerformed(evt);
            }
        });
        jPanel1.add(staff_record, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 546, 331, 48));

        exit_btn.setBackground(new java.awt.Color(204, 255, 0));
        exit_btn.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        exit_btn.setText("Exit");
        exit_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_btnActionPerformed(evt);
            }
        });
        jPanel1.add(exit_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 716, 331, 48));

        invent_btn.setBackground(new java.awt.Color(204, 255, 0));
        invent_btn.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        invent_btn.setText("Inventory");
        invent_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invent_btnActionPerformed(evt);
            }
        });
        jPanel1.add(invent_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 632, 331, 48));

        jLabel77.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(255, 0, 0));
        jLabel77.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel77.setText("-");
        jLabel77.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel77MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 30, 20));

        jLabel53.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel53.setIcon(new javax.swing.ImageIcon("D:\\NetBeans Projects\\BrainwaveTasks\\img\\royalblueframecrop.jpg")); // NOI18N
        jPanel1.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 1080));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 1080));

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(2076, 1080));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Appointment ID");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 228, 50));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Patient ID");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 150, 228, 50));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Doctor ID");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 310, 228, 50));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Appointment Date");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 630, 228, 50));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Status");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 880, 228, 50));

        app_id.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel3.add(app_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 550, 400, 50));

        p_id.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel3.add(p_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 150, 400, 50));

        d_id.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        d_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_idActionPerformed(evt);
            }
        });
        jPanel3.add(d_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 310, 400, 50));

        status_appoint.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        status_appoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status_appointActionPerformed(evt);
            }
        });
        jPanel3.add(status_appoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 880, 400, 50));

        submit_app.setBackground(new java.awt.Color(255, 255, 102));
        submit_app.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        submit_app.setText("Submit");
        submit_app.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_appActionPerformed(evt);
            }
        });
        jPanel3.add(submit_app, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 1000, 150, 50));

        new_app.setBackground(new java.awt.Color(255, 255, 102));
        new_app.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        new_app.setText("New");
        new_app.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_appActionPerformed(evt);
            }
        });
        jPanel3.add(new_app, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 1000, 150, 50));

        jLabel17.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(153, 51, 0));
        jLabel17.setText("                             Fix your appointment here..");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 34, 1440, 62));

        update_app.setBackground(new java.awt.Color(255, 255, 102));
        update_app.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        update_app.setText("Update");
        update_app.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_appActionPerformed(evt);
            }
        });
        jPanel3.add(update_app, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 1000, 150, 50));

        delete_app.setBackground(new java.awt.Color(255, 255, 102));
        delete_app.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        delete_app.setText("Delete");
        delete_app.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_appActionPerformed(evt);
            }
        });
        jPanel3.add(delete_app, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 1000, 150, 50));

        search_app.setBackground(new java.awt.Color(255, 255, 102));
        search_app.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        search_app.setText("Search");
        search_app.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_appActionPerformed(evt);
            }
        });
        jPanel3.add(search_app, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 1000, 150, 50));

        app_date.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        app_date.setOpaque(false);
        jPanel3.add(app_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 630, 400, 50));

        p_name_appoint.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel3.add(p_name_appoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 230, 400, 50));

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(255, 255, 255));
        jLabel60.setText("Patient Name");
        jPanel3.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 230, 228, 50));

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(255, 255, 255));
        jLabel61.setText("Doctor Name");
        jPanel3.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 390, 228, 50));

        d_name_appoint.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        d_name_appoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d_name_appointActionPerformed(evt);
            }
        });
        jPanel3.add(d_name_appoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 390, 400, 50));

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(255, 255, 255));
        jLabel62.setText("Specialization");
        jPanel3.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 470, 228, 50));

        doc_special_app.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doc_special_app.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_special_appActionPerformed(evt);
            }
        });
        jPanel3.add(doc_special_app, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 470, 400, 50));

        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(255, 255, 255));
        jLabel63.setText("Appointment Time");
        jPanel3.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 790, 228, 50));

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel64.setForeground(new java.awt.Color(255, 255, 255));
        jLabel64.setText("Appointment Type");
        jPanel3.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 710, 228, 50));

        appointment_type.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        appointment_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Appointment Type", "Consultation", "Follow-Up", "Surgery" }));
        jPanel3.add(appointment_type, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 710, 400, 50));

        appointment_time.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        appointment_time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointment_timeActionPerformed(evt);
            }
        });
        jPanel3.add(appointment_time, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 790, 400, 50));

        jLabel65.setForeground(new java.awt.Color(255, 255, 255));
        jLabel65.setText("(HH:MM:SS 24 Hour Format)");
        jPanel3.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 840, 170, -1));

        jLabel32.setIcon(new javax.swing.ImageIcon("D:\\NetBeans Projects\\BrainwaveTasks\\img\\hospitalbg1cpy.jpg")); // NOI18N
        jPanel3.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 1090));

        jTabbedPane3.addTab("", jPanel3);

        jTabbedPane1.addTab("tab2", jTabbedPane3);

        jTabbedPane5.setPreferredSize(new java.awt.Dimension(1470, 1080));

        jPanel5.setPreferredSize(new java.awt.Dimension(1470, 1080));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel25.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(153, 51, 0));
        jLabel25.setText("                          Health Record ");
        jPanel5.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 13, 1080, 60));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Record Id");
        jPanel5.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 220, 50));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Doctor Id");
        jPanel5.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, 220, 50));

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Symptoms");
        jPanel5.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 460, 220, 50));

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Treatment");
        jPanel5.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 590, 220, 50));

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Allergies");
        jPanel5.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 720, 220, 50));

        id_health.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel5.add(id_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, 550, 50));

        doctor_id_health.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doctor_id_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctor_id_healthActionPerformed(evt);
            }
        });
        jPanel5.add(doctor_id_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 180, 550, 50));

        symptoms_health.setColumns(20);
        symptoms_health.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        symptoms_health.setLineWrap(true);
        symptoms_health.setRows(5);
        jScrollPane3.setViewportView(symptoms_health);

        jPanel5.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 460, 550, 110));

        treat_health.setColumns(20);
        treat_health.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        treat_health.setLineWrap(true);
        treat_health.setRows(5);
        jScrollPane4.setViewportView(treat_health);

        jPanel5.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 590, 550, 110));

        allergies_health.setColumns(20);
        allergies_health.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        allergies_health.setLineWrap(true);
        allergies_health.setRows(5);
        jScrollPane5.setViewportView(allergies_health);

        jPanel5.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 720, 550, 90));

        submit_health.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        submit_health.setText("Submit");
        submit_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_healthActionPerformed(evt);
            }
        });
        jPanel5.add(submit_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 1010, 150, 50));

        new_health.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        new_health.setText("New");
        new_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_healthActionPerformed(evt);
            }
        });
        jPanel5.add(new_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 1010, 150, 50));

        delete_health.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        delete_health.setText("Delete");
        delete_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_healthActionPerformed(evt);
            }
        });
        jPanel5.add(delete_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 1010, 150, 50));

        update_health.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        update_health.setText("Update");
        update_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_healthActionPerformed(evt);
            }
        });
        jPanel5.add(update_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 1010, 150, 50));

        search_health.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        search_health.setText("Search");
        search_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_healthActionPerformed(evt);
            }
        });
        jPanel5.add(search_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 1010, 150, 50));

        jLabel66.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel66.setForeground(new java.awt.Color(255, 255, 255));
        jLabel66.setText("Patient Name");
        jPanel5.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 250, 220, 50));

        patient_name_health.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        patient_name_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_name_healthActionPerformed(evt);
            }
        });
        jPanel5.add(patient_name_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 250, 550, 50));

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel67.setForeground(new java.awt.Color(255, 255, 255));
        jLabel67.setText("Patient Age");
        jPanel5.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 320, 220, 50));

        patient_age_health.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        patient_age_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_age_healthActionPerformed(evt);
            }
        });
        jPanel5.add(patient_age_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 320, 550, 50));

        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 255, 255));
        jLabel68.setText("Follow-Up Date");
        jPanel5.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 390, 220, 50));

        follow_date_health.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        follow_date_health.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                follow_date_healthActionPerformed(evt);
            }
        });
        jPanel5.add(follow_date_health, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 390, 550, 50));

        jLabel69.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 255, 255));
        jLabel69.setText("Vital Signs");
        jPanel5.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 830, 220, 50));

        vital_signs_health.setColumns(20);
        vital_signs_health.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        vital_signs_health.setLineWrap(true);
        vital_signs_health.setRows(5);
        jScrollPane6.setViewportView(vital_signs_health);

        jPanel5.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 830, 550, 90));

        jLabel70.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel70.setForeground(new java.awt.Color(255, 255, 255));
        jLabel70.setText("Status");
        jPanel5.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 940, 220, 50));

        status_health_record.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        status_health_record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status_health_recordActionPerformed(evt);
            }
        });
        jPanel5.add(status_health_record, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 940, 550, 50));

        jLabel71.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(255, 255, 255));
        jLabel71.setText("Date:");
        jPanel5.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 10, 50, 40));

        jLabel72.setForeground(new java.awt.Color(255, 255, 255));
        jLabel72.setText("(YYYY:MM:DD)");
        jPanel5.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 410, 110, 30));

        date_of_record.setBackground(new java.awt.Color(0, 0, 0));
        date_of_record.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        date_of_record.setForeground(new java.awt.Color(255, 255, 255));
        date_of_record.setOpaque(false);
        jPanel5.add(date_of_record, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 10, 160, 40));

        jLabel37.setIcon(new javax.swing.ImageIcon("D:\\NetBeans Projects\\BrainwaveTasks\\img\\hospitalbg1cpy.jpg")); // NOI18N
        jPanel5.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 1090));

        jTabbedPane5.addTab("", jPanel5);

        jTabbedPane1.addTab("tab4", jTabbedPane5);

        jTabbedPane4.setPreferredSize(new java.awt.Dimension(2071, 1080));

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(153, 51, 0));
        jLabel18.setText("Payment ");
        jPanel4.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 2042, 59));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Payment ID");
        jPanel4.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 265, 50));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Patient ID");
        jPanel4.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 265, 49));

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Amount");
        jPanel4.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 265, 50));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Payment Date");
        jPanel4.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 265, 50));

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Payment Mode");
        jPanel4.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 265, 50));

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Status");
        jPanel4.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 820, 265, 50));

        payid_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel4.add(payid_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, 409, 50));

        patientid_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel4.add(patientid_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 280, 409, 49));

        amount_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel4.add(amount_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, 409, 50));

        stat_pay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel4.add(stat_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 820, 409, 51));

        submit_pay.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        submit_pay.setText("Submit");
        submit_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_payActionPerformed(evt);
            }
        });
        jPanel4.add(submit_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 940, 135, 48));

        new_pay.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        new_pay.setText("New");
        new_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_payActionPerformed(evt);
            }
        });
        jPanel4.add(new_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 940, 135, 48));

        update_pay.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        update_pay.setText("Update");
        update_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_payActionPerformed(evt);
            }
        });
        jPanel4.add(update_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 940, 135, 48));

        search_pay.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        search_pay.setText("Search");
        search_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_payActionPerformed(evt);
            }
        });
        jPanel4.add(search_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 940, 135, 48));

        pay_mode.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pay_mode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Mode", "Cash", "Credit Card", "Debit Card", "UPI" }));
        pay_mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pay_modeActionPerformed(evt);
            }
        });
        jPanel4.add(pay_mode, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 550, 410, 50));

        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel51.setIcon(new javax.swing.ImageIcon("C:\\Users\\janha\\OneDrive\\Pictures\\Saved Pictures\\QR-CODE.jpg")); // NOI18N

        done_pay.setBackground(new java.awt.Color(255, 153, 0));
        done_pay.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        done_pay.setText("DONE");
        done_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                done_payActionPerformed(evt);
            }
        });

        jLabel52.setBackground(new java.awt.Color(51, 255, 102));
        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel52.setText("Pay with UPI");
        jLabel52.setOpaque(true);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(done_pay, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel51))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel52, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel51)
                .addGap(18, 18, 18)
                .addComponent(done_pay, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 325, -1, 320));

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel45.setText("Card Type");

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel46.setText("Card Number");

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel47.setText("CVV");

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel48.setText("Expiry Date");

        jLabel49.setBackground(new java.awt.Color(51, 255, 153));
        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(153, 51, 0));
        jLabel49.setText("Pay with Card");
        jLabel49.setOpaque(true);

        jLabel50.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel50.setText("Your Name");

        pay_card.setBackground(new java.awt.Color(204, 255, 0));
        pay_card.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        pay_card.setText("Pay");
        pay_card.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pay_cardActionPerformed(evt);
            }
        });

        jLabel75.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel75.setText("Card Pay ID");

        jLabel76.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel76.setText("Pay ID");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel47, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel46, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(jLabel50, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name_card, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card_no, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cvv_no, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(expiry_date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel75, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(pay_id_card, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(card_type, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel76, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pay_card, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(payc_id, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pay_id_card)
                    .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(card_type)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name_card))
                .addGap(37, 37, 37)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card_no))
                .addGap(37, 37, 37)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cvv_no))
                .addGap(37, 37, 37)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expiry_date))
                .addGap(33, 33, 33)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(payc_id)
                    .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pay_card, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, -1, -1));

        del_pay.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        del_pay.setText("Delete");
        del_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del_payActionPerformed(evt);
            }
        });
        jPanel4.add(del_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 940, 135, 48));

        pay_date.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel4.add(pay_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 460, 409, 50));

        jLabel54.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(255, 255, 255));
        jLabel54.setText("Amount Paid");
        jPanel4.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 640, 265, 50));

        amtpaid_pay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel4.add(amtpaid_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 640, 409, 50));

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        jLabel58.setText("Outstanding Balance");
        jPanel4.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 730, 265, 50));

        outst_pay.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel4.add(outst_pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 730, 409, 50));

        jLabel33.setForeground(new java.awt.Color(255, 255, 0));
        jLabel33.setIcon(new javax.swing.ImageIcon("D:\\NetBeans Projects\\BrainwaveTasks\\img\\hospitalbg1cpy.jpg")); // NOI18N
        jPanel4.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 1090));

        jTabbedPane4.addTab("", jPanel4);

        jTabbedPane1.addTab("tab3", jTabbedPane4);

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel34.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(153, 51, 0));
        jLabel34.setText("                          Add Doctor Record");
        jPanel6.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 36, 1436, 60));

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Doctor ID");
        jPanel6.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, 250, 50));

        sl2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        sl2.setForeground(new java.awt.Color(255, 255, 255));
        sl2.setText("Name");
        jPanel6.add(sl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 250, 250, 50));

        sl3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        sl3.setForeground(new java.awt.Color(255, 255, 255));
        sl3.setText("Role");
        jPanel6.add(sl3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 360, 250, 50));

        sl4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        sl4.setForeground(new java.awt.Color(255, 255, 255));
        sl4.setText("Department");
        jPanel6.add(sl4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 470, 250, 50));

        sl5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        sl5.setForeground(new java.awt.Color(255, 255, 255));
        sl5.setText("Contact");
        jPanel6.add(sl5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 580, 250, 50));

        doctor_id.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doctor_id.setOpaque(false);
        jPanel6.add(doctor_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 140, 456, 50));

        doctor_name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doctor_name.setOpaque(false);
        jPanel6.add(doctor_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 250, 456, 50));

        doctor_role.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doctor_role.setOpaque(false);
        jPanel6.add(doctor_role, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 360, 456, 50));

        doctor_dept.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doctor_dept.setOpaque(false);
        jPanel6.add(doctor_dept, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 470, 456, 50));

        doctor_cont.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doctor_cont.setOpaque(false);
        jPanel6.add(doctor_cont, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 580, 456, 50));

        submit_staff.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        submit_staff.setText("Submit");
        submit_staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_staffActionPerformed(evt);
            }
        });
        jPanel6.add(submit_staff, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 820, 150, 50));

        new_staff.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        new_staff.setText("New");
        new_staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_staffActionPerformed(evt);
            }
        });
        jPanel6.add(new_staff, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 820, 150, 50));

        update_staff.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        update_staff.setText("Update");
        update_staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_staffActionPerformed(evt);
            }
        });
        jPanel6.add(update_staff, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 820, 150, 50));

        delete_staff.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        delete_staff.setText("Delete");
        delete_staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_staffActionPerformed(evt);
            }
        });
        jPanel6.add(delete_staff, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 820, 150, 50));

        search_staff.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        search_staff.setText("Search");
        search_staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_staffActionPerformed(evt);
            }
        });
        jPanel6.add(search_staff, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 820, 150, 50));

        sl6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        sl6.setForeground(new java.awt.Color(255, 255, 255));
        sl6.setText("Experience(In Years)");
        jPanel6.add(sl6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 690, 260, 50));

        doctor_experience.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        doctor_experience.setOpaque(false);
        jPanel6.add(doctor_experience, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 690, 456, 50));

        jLabel36.setIcon(new javax.swing.ImageIcon("D:\\NetBeans Projects\\BrainwaveTasks\\img\\hospitalbg1cpy.jpg")); // NOI18N
        jPanel6.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 1080));

        jTabbedPane6.addTab("", jPanel6);

        jTabbedPane1.addTab("tab5", jTabbedPane6);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 51, 0));
        jLabel2.setText("                    Patient Login");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 2042, 61));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Patient Id");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 105, 210, 50));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Name");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 173, 210, 50));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Gender");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 241, 210, 50));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Age");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 418, 210, 50));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Address");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 486, 210, 50));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Phone No.");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 610, 210, 50));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Email-ID");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 680, 210, 50));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("MedicalHistory");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 760, 210, 49));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Registration Date");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 900, 210, 50));

        id_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        id_txt.setOpaque(false);
        jPanel2.add(id_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(479, 105, 492, 50));

        P_name_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        P_name_txt.setOpaque(false);
        jPanel2.add(P_name_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(479, 173, 492, 50));

        buttonGroup1.add(male_btn);
        male_btn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        male_btn.setForeground(new java.awt.Color(255, 255, 255));
        male_btn.setText("Male");
        male_btn.setOpaque(false);
        jPanel2.add(male_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(479, 241, 135, 41));

        buttonGroup1.add(female_btn);
        female_btn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        female_btn.setForeground(new java.awt.Color(255, 255, 255));
        female_btn.setText("Female");
        female_btn.setOpaque(false);
        jPanel2.add(female_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(479, 300, 135, 41));

        buttonGroup1.add(other_btn);
        other_btn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        other_btn.setForeground(new java.awt.Color(255, 255, 255));
        other_btn.setText("Other");
        other_btn.setOpaque(false);
        jPanel2.add(other_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(479, 359, 135, 41));

        age_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        age_txt.setOpaque(false);
        jPanel2.add(age_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(479, 418, 492, 50));

        address_txt.setColumns(20);
        address_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        address_txt.setLineWrap(true);
        address_txt.setRows(5);
        address_txt.setOpaque(false);
        jScrollPane1.setViewportView(address_txt);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(479, 486, 492, 110));

        phone_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        phone_txt.setOpaque(false);
        jPanel2.add(phone_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 610, 492, 50));

        email_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        email_txt.setOpaque(false);
        jPanel2.add(email_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 680, 492, 50));

        mhis_txt.setColumns(20);
        mhis_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        mhis_txt.setLineWrap(true);
        mhis_txt.setRows(5);
        mhis_txt.setOpaque(false);
        jScrollPane2.setViewportView(mhis_txt);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 760, 492, 110));

        rgdate_txt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        rgdate_txt.setOpaque(false);
        rgdate_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgdate_txtActionPerformed(evt);
            }
        });
        jPanel2.add(rgdate_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 900, 492, 50));

        submit_btn.setBackground(new java.awt.Color(255, 255, 102));
        submit_btn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        submit_btn.setText("Submit");
        submit_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_btnActionPerformed(evt);
            }
        });
        jPanel2.add(submit_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 1009, 125, 47));

        new_btn.setBackground(new java.awt.Color(255, 255, 102));
        new_btn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        new_btn.setText("New");
        new_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_btnActionPerformed(evt);
            }
        });
        jPanel2.add(new_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(381, 1009, 125, 47));

        update_btn.setBackground(new java.awt.Color(255, 255, 102));
        update_btn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        update_btn.setText("Update");
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });
        jPanel2.add(update_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 1009, 125, 47));

        delete_btn.setBackground(new java.awt.Color(255, 255, 102));
        delete_btn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        delete_btn.setText("Delete");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });
        jPanel2.add(delete_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(798, 1009, 125, 47));

        search_btn.setBackground(new java.awt.Color(255, 255, 102));
        search_btn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        search_btn.setText("Search");
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });
        jPanel2.add(search_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1007, 1009, 125, 47));

        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setIcon(new javax.swing.ImageIcon("D:\\NetBeans Projects\\BrainwaveTasks\\img\\hospitalbg1cpy.jpg")); // NOI18N
        jPanel2.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1500, 1090));

        jTabbedPane2.addTab("", jPanel2);

        jTabbedPane1.addTab("tab1", jTabbedPane2);

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel38.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(153, 51, 0));
        jLabel38.setText("                             Inventory Management of Medical Supplies");
        jPanel7.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 30, -1, 60));

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("Medicine Id");
        jPanel7.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 141, 250, 50));

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("Medicine Name");
        jPanel7.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 227, 250, 50));

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Quantity in Stock");
        jPanel7.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 485, 250, 50));

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setText("Supplier");
        jPanel7.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 571, 250, 50));

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Last Updated");
        jPanel7.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 820, 250, 50));

        id_med.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(id_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 141, 500, 50));

        item_med.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(item_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 227, 500, 50));

        quant_med.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(quant_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 485, 500, 50));

        supplier_med.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(supplier_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 572, 500, 50));

        lastup_med.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(lastup_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 820, 500, 50));

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("Cost(In Rs.)");
        jPanel7.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 658, 250, 50));

        cost_med.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(cost_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 658, 500, 50));

        submit_med.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        submit_med.setText("Submit");
        submit_med.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_medActionPerformed(evt);
            }
        });
        jPanel7.add(submit_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 945, 150, 50));

        new_med.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        new_med.setText("New");
        new_med.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_medActionPerformed(evt);
            }
        });
        jPanel7.add(new_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 945, 150, 50));

        update_med.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        update_med.setText("Update");
        update_med.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_medActionPerformed(evt);
            }
        });
        jPanel7.add(update_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(707, 945, 150, 50));

        delete_med.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        delete_med.setText("Delete");
        delete_med.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_medActionPerformed(evt);
            }
        });
        jPanel7.add(delete_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(946, 945, 150, 50));

        search_med.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        search_med.setText("Search");
        search_med.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_medActionPerformed(evt);
            }
        });
        jPanel7.add(search_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(1184, 945, 150, 50));

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(255, 255, 255));
        jLabel55.setText("Category");
        jPanel7.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 313, 250, 50));

        categ_invent.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(categ_invent, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 313, 500, 50));

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(255, 255, 255));
        jLabel56.setText("Manufacturer");
        jPanel7.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 399, 250, 50));

        manufact_invent.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(manufact_invent, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 399, 500, 50));

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        jLabel57.setText("Status");
        jPanel7.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 740, 250, 50));

        status_med.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel7.add(status_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 740, 500, 50));

        jLabel73.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel73.setForeground(new java.awt.Color(255, 255, 255));
        jLabel73.setText("(YYYY-MM-DD)");
        jPanel7.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 836, 110, 30));

        jLabel74.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel74.setForeground(new java.awt.Color(255, 255, 255));
        jLabel74.setText("Date:");
        jPanel7.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 10, 50, 30));

        Date_of_inventory.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Date_of_inventory.setForeground(new java.awt.Color(255, 255, 255));
        jPanel7.add(Date_of_inventory, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 10, 140, 30));

        jLabel59.setIcon(new javax.swing.ImageIcon("D:\\NetBeans Projects\\BrainwaveTasks\\img\\hospitalbg1cpy.jpg")); // NOI18N
        jPanel7.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 1090));

        jTabbedPane7.addTab("tab1", jPanel7);

        jTabbedPane1.addTab("tab6", jTabbedPane7);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(454, -60, 1470, 1140));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean saveRecord() {
    rgdate_txt.setText("" + ld);

    // Validate input fields
    if (id_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Your Id.");
    } else if (P_name_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Your Name.");
    } else if (!male_btn.isSelected() && !female_btn.isSelected() && !other_btn.isSelected()) {
        JOptionPane.showMessageDialog(null, "Please Select your gender.");
    } else if (age_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Age.");
    } else if (address_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Address.");
    } else if (phone_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Phone No.");
    } else if (email_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Email-ID.");
//    } else if (mhis_txt.getText().equals("")) {
//        JOptionPane.showMessageDialog(null, "Please tell your medical history.");
    } else if (rgdate_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter registration date.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL insert statement
            String sql = "INSERT INTO Patient (patient_id, name, gender, age, address, phone_no, email_id, medical_history, registration_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameters for the query
            pstmt.setInt(1, Integer.parseInt(id_txt.getText())); // Assuming id_txt is a text field for patient_id
            pstmt.setString(2, P_name_txt.getText());
            
            // Determine which radio button is selected for gender
            String gender = "";
            if (male_btn.isSelected()) {
                gender = "Male";
            } else if (female_btn.isSelected()) {
                gender = "Female";
            } else if (other_btn.isSelected()) {
                gender = "Other";
            }
            pstmt.setString(3, gender);
            
            pstmt.setInt(4, Integer.parseInt(age_txt.getText()));
            pstmt.setString(5, address_txt.getText());
            pstmt.setString(6, phone_txt.getText());
            pstmt.setString(7, email_txt.getText());
            pstmt.setString(8, mhis_txt.getText());
            pstmt.setString(9, rgdate_txt.getText());

            // Execute the insert command
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Saved Successfully");
                noteditlogin();
                newloginpatient();
                return true;
            }

            // Close the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage());
        }
    }
    return false;
}
    public void editlogin(){
        id_txt.setEditable(true);
        P_name_txt.setEditable(true);
        age_txt.setEditable(true);
        address_txt.setEditable(true);
        phone_txt.setEditable(true);
        email_txt.setEditable(true);
        mhis_txt.setEditable(true);
        rgdate_txt.setEditable(true);
        
    }
    public void editpay(){
        payid_txt.setEditable(true);
        patientid_txt.setEditable(true);
        amount_txt.setEditable(true);
     //   pay_date.setEditable(true);
        amtpaid_pay.setEditable(true);
        outst_pay.setEditable(true);
        pay_mode.setEditable(true);
        stat_pay.setEditable(true);
    }
    public void editapp(){
         p_id.setEditable(true);
        p_name_appoint.setEditable(true);
        d_id.setEditable(true);
        d_name_appoint.setEditable(true);
        doc_special_app.setEditable(true);
        app_id.setEditable(true);
        appointment_type.setEditable(true);
        appointment_time.setEditable(true);        
        status_appoint.setEditable(true);
        
        }
    public void edithealth(){
        id_health.setEditable(true);
        doctor_id_health.setEditable(true);
        symptoms_health.setEditable(true);
        treat_health.setEditable(true);
        allergies_health.setEditable(true);
        
        }
    public void noteditlogin(){
        id_txt.setEditable(false);
        P_name_txt.setEditable(false);
        age_txt.setEditable(false);
        address_txt.setEditable(false);
        phone_txt.setEditable(false);
        email_txt.setEditable(false);
        mhis_txt.setEditable(false);
        rgdate_txt.setEditable(false);
        
    }  
    public void noteditpay(){
        payid_txt.setEditable(false);
        patientid_txt.setEditable(false);
        amount_txt.setEditable(false);
        //pay_date.setEditable(false);
        pay_mode.setEditable(false);
        amtpaid_pay.setEditable(false);
        outst_pay.setEditable(false);
        stat_pay.setEditable(false);
        }
    public void noteditapp(){
        p_id.setEditable(false);
        p_name_appoint.setEditable(false);
        d_id.setEditable(false);
        d_name_appoint.setEditable(false);
        doc_special_app.setEditable(false);
        app_id.setEditable(false);
        appointment_type.setEditable(false);
        appointment_time.setEditable(false);        
        status_appoint.setEditable(false);
        
        }
    public void notedithealth(){
        id_health.setEditable(false);
        doctor_id_health.setEditable(false);
        symptoms_health.setEditable(false);
        treat_health.setEditable(false);
        allergies_health.setEditable(false);
        
        }
    

    private boolean validateTimeFormat(String time) {
    // Regular expression to match HH:MM:SS format
    String regex = "([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]";
    return time.matches(regex);
}

    private void inputapp() {
    // Validate input fields
    if (p_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient Id.");
    } else if (p_name_appoint.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient Name.");
    } else if (d_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor Id.");
    } else if (d_name_appoint.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor Name.");
    } else if (doc_special_app.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor Specialization.");
    } else if (app_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Appointment Id.");
    } else if (appointment_type.getSelectedItem().equals("Select Appointment Type")) {
        JOptionPane.showMessageDialog(null, "Please Select Appointment Type.");
    } else if (appointment_time.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Appointment Time.");
    } else if (!validateTimeFormat(appointment_time.getText())) {
        JOptionPane.showMessageDialog(null, "Please enter time in HH:MM:SS format.");
    } else if (status_appoint.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Status of Appointment.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL insert statement
            String sql = "INSERT INTO Appointment (patient_id, patient_name, doctor_id, doctor_name, specialization, appointment_id, appointment_date, appointment_type, appointment_time, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameters for the query
            pstmt.setInt(1, Integer.parseInt(p_id.getText())); // Patient ID
            pstmt.setString(2, p_name_appoint.getText()); // Patient Name
            pstmt.setInt(3, Integer.parseInt(d_id.getText())); // Doctor ID
            pstmt.setString(4, d_name_appoint.getText()); // Doctor Name
            pstmt.setString(5, doc_special_app.getText()); // Specialization
            pstmt.setInt(6, Integer.parseInt(app_id.getText())); // Appointment ID

            // Convert the appointment_date from Spinner to java.sql.Date
            java.util.Date utilDate = (java.util.Date)app_date.getValue();
            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
            pstmt.setDate(7, sqlDate); // Appointment Date

            pstmt.setString(8, appointment_type.getSelectedItem().toString()); // Appointment Type
            pstmt.setString(9, appointment_time.getText()); // Appointment Time
            pstmt.setString(10, status_appoint.getText()); // Status

            // Execute the insert command
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Saved Successfully");
                newbtnAppointment();
                 // Call the method to clear the fields or update the UI
            }

            // Close the statement and the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage());
        }
    }
    
    
}
    private void inputhealth(){
        
       date_of_record.setText("" + ldate);
    // Validate input fields
    if (id_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Id.");
    } else if (doctor_id_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor Id.");
    } else if (patient_name_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient Name.");
    } else if (patient_age_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient Age.");
    } else if (follow_date_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Follow-Up Date.");
    } else if (symptoms_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Symptoms.");
    } else if (treat_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter the Treatment.");
    } else if (allergies_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Allergies.");
    } else if (vital_signs_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Vital Signs.");
    } else if (status_health_record.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Status of Record (e.g., Open, Closed, Pending Review).");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL insert statement
            String sql = "INSERT INTO HealthRecord (record_id, doctor_id, patient_name, patient_age, follow_up_date, symptoms, treatment, allergies, vital_signs, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameters for the query
            pstmt.setInt(1, Integer.parseInt(id_health.getText())); // Record ID
            pstmt.setInt(2, Integer.parseInt(doctor_id_health.getText())); // Doctor ID
            pstmt.setString(3, patient_name_health.getText()); // Patient Name
            pstmt.setInt(4, Integer.parseInt(patient_age_health.getText())); // Patient Age
            pstmt.setString(5, follow_date_health.getText()); // Follow-Up Date
            pstmt.setString(6, symptoms_health.getText()); // Symptoms
            pstmt.setString(7, treat_health.getText()); // Treatment
            pstmt.setString(8, allergies_health.getText()); // Allergies
            pstmt.setString(9, vital_signs_health.getText()); // Vital Signs
            pstmt.setString(10, status_health_record.getText()); // Status

            // Execute the insert command
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Saved Successfully.");
                newBtnHealth();
                
            }

            // Close the statement and the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage());
        }
    }
}

// Optional: Method to clear input fields after successful save

    
    private void inputpay(){
       
    if (payid_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Payment ID.");
    } else if (patientid_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient ID.");
    } else if (amount_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Amount.");
    } else if (pay_mode.getSelectedItem().equals("Select Mode")) {
        JOptionPane.showMessageDialog(null, "Please Enter Payment Mode.");
    } else if (amtpaid_pay.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Paid Amount.");
    } else if (outst_pay.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Remaining Amount to Pay.");
    }    else if (stat_pay.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Status of Payment.");
        
    } else {
         String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";


    try {
        // Establishing a connection to the database
        Connection con = DriverManager.getConnection(DB_URL, USER, PASSWORD);
        
        // SQL query to insert the payment data into the Payment table
        String query = "INSERT INTO Payment (payment_id, patient_id, amount, payment_date, payment_mode, amount_paid, outstanding_balance, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        
        // Creating a PreparedStatement to execute the query
        PreparedStatement pst = con.prepareStatement(query);
        
        // Setting the values from the user inputs in the form
        pst.setInt(1, Integer.parseInt(payid_txt.getText())); // Payment ID
        pst.setInt(2, Integer.parseInt(patientid_txt.getText())); // Patient ID
        pst.setDouble(3, Double.parseDouble(amount_txt.getText())); // Amount
        
        // Assuming the date is in the format YYYY-MM-DD and converting it to SQL Date
        String paymentDate = java.time.LocalDate.now().toString(); // Gets current date in YYYY-MM-DD format
        pst.setDate(4, java.sql.Date.valueOf(paymentDate));  // Payment Date
        
        pst.setString(5, (String) pay_mode.getSelectedItem()); // Payment Mode (From JComboBox)
        pst.setDouble(6, Double.parseDouble(amtpaid_pay.getText())); // Amount Paid
        pst.setDouble(7, Double.parseDouble(outst_pay.getText())); // Outstanding Balance
        pst.setString(8, stat_pay.getText()); // Assuming status is 'Paid', change if necessary
        
        // Executing the query
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Record Saved Successfully!");
        newBtnPay();
        // Closing resources
        pst.close();
        con.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error while saving payment data: " + e.getMessage());
        }
      }

    }
    public void noteditstaff(){
        doctor_id.setEditable(false);
        doctor_name.setEditable(false);
        doctor_role.setEditable(false);
        doctor_dept.setEditable(false);
        doctor_cont.setEditable(false);
        doctor_experience.setEditable(false);
        
        }
    public void editstaff(){
        doctor_id.setEditable(true);
        doctor_name.setEditable(true);
        doctor_role.setEditable(true);
        doctor_dept.setEditable(true);
        doctor_cont.setEditable(true);
        doctor_experience.setEditable(true);
        
        }

    private void inputstaff() {
    // Validate input fields
    if (doctor_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor ID.");
    } else if (doctor_name.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Name.");
    } else if (doctor_role.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Role.");
    } else if (doctor_dept.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Department.");
    } else if (doctor_cont.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Contact.");
    } else if (doctor_experience.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Experience.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL insert statement
            String sql = "INSERT INTO Doctor (doctor_id, name, role, department, contact, experience) VALUES (?, ?, ?, ?, ?, ?)";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameters for the query
            pstmt.setInt(1, Integer.parseInt(doctor_id.getText())); // Doctor ID
            pstmt.setString(2, doctor_name.getText()); // Staff Name
            pstmt.setString(3, doctor_role.getText()); // Staff Role
            pstmt.setString(4, doctor_dept.getText()); // Department
            pstmt.setString(5, doctor_cont.getText()); // Staff Contact
            pstmt.setString(6, doctor_experience.getText()); // Staff Experience

            // Execute the insert command
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Saved Successfully");
                newBtnStaff();
                 // Call the method to clear the fields or update the UI
            }

            // Close the statement and the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage());
        }
    }
}
    private void inputinventory(){
        
        if(id_med.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Medicine ID.");
        }    else if(item_med.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Medicine Name.");
        }    else if(categ_invent.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Medicine Category."); 
        }       else if(manufact_invent.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please Enter Manufacturer.");
        }    else if(quant_med.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Quantity of medicines.");
        }    else if(supplier_med.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please Enter Supplier.");  
        }    else if(cost_med.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Price per packet."); 
        }    else if(status_med.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Status of Medicine."); 
        }        else if(lastup_med.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Last Updated Stock Date."); 
        } else    {
            
            String DB_URL = "jdbc:mysql://localhost:3306/hospital";
            String USER = "root";
            String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL insert statement
            String sql = "INSERT INTO Inventory (medicine_id, medicine_name, category, manufacturer, quantity, supplier, price_per_packet, status, last_updated_stock_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

            PreparedStatement pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, id_med.getText());
            pstmt.setString(2, item_med.getText());
            pstmt.setString(3, categ_invent.getText());
            pstmt.setString(4, manufact_invent.getText());
            pstmt.setInt(5, Integer.parseInt(quant_med.getText()));
            pstmt.setString(6, supplier_med.getText());
            pstmt.setDouble(7, Double.parseDouble(cost_med.getText()));
            pstmt.setString(8, status_med.getText());
            pstmt.setString(9, lastup_med.getText());

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Saved Successfully");
                newBtnInventory();
                 // Call the method to clear the fields or update the UI
            }
            
            pstmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage());
        }
    } 
}

    private void editinventory(){
        id_med.setEditable(true);
        item_med.setEditable(true);
        categ_invent.setEditable(true);
        manufact_invent.setEditable(true);
        quant_med.setEditable(true);
        supplier_med.setEditable(true);
        cost_med.setEditable(true);
        status_med.setEditable(true);
        lastup_med.setEditable(true);  
        
    }
    private void noteditinventory(){
        id_med.setEditable(false);
        item_med.setEditable(false);
        categ_invent.setEditable(false);
        manufact_invent.setEditable(false);
        quant_med.setEditable(false);
        supplier_med.setEditable(false);
        cost_med.setEditable(false);
        status_med.setEditable(false);
        lastup_med.setEditable(false);  
        
    }
    
    private void update_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_payActionPerformed
        

        if (payid_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Payment ID.");
    } else if (patientid_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient ID.");
    } else if (amount_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Amount.");
    } else if (pay_mode.getSelectedItem().equals("Select Mode")) {
        JOptionPane.showMessageDialog(null, "Please Enter Payment Mode.");
    } else if (amtpaid_pay.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Paid Amount.");
    } else if (outst_pay.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Remaining Amount to Pay.");
    }  else if (stat_pay.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Status of Payment.");  
    } else {
         String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";
        
    
    // Method to save payment data into the database

    try {
        // Establishing a connection to the database
        Connection con = DriverManager.getConnection(DB_URL,USER,PASSWORD);
        
        // SQL query to insert the payment data into the Payment table
        String query = "UPDATE Payment SET patient_id = ?, amount = ?, payment_date = ?, payment_mode = ?, amount_paid = ?, outstanding_balance = ?, status = ? WHERE payment_id = ?";
        
        // Creating a PreparedStatement to execute the query
        PreparedStatement pst = con.prepareStatement(query);
        
        // Setting the values from the user inputs in the form
        pst.setInt(1, Integer.parseInt(payid_txt.getText())); // Payment ID
        pst.setInt(2, Integer.parseInt(patientid_txt.getText())); // Patient ID
        pst.setDouble(3, Double.parseDouble(amount_txt.getText())); // Amount
        
        // Assuming the date is in the format YYYY-MM-DD and converting it to SQL Date
        String paymentDate = java.time.LocalDate.now().toString(); // Gets current date in YYYY-MM-DD format
        pst.setDate(4, java.sql.Date.valueOf(paymentDate));  // Payment Date
        
        pst.setString(5, (String) pay_mode.getSelectedItem()); // Payment Mode (From JComboBox)
        pst.setDouble(6, Double.parseDouble(amtpaid_pay.getText())); // Amount Paid
        pst.setDouble(7, Double.parseDouble(outst_pay.getText())); // Outstanding Balance
        pst.setString(8, stat_pay.getText()); // Assuming status is 'Paid', change if necessary
        
        // Executing the query
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Record Saved Successfully!");
        newBtnPay();
        // Closing resources
        pst.close();
        con.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error while saving payment data: " + e.getMessage());
    }
    }
    }//GEN-LAST:event_update_payActionPerformed
    private void newBtnPay() {
        if(payid_txt.getText().equals("") && patientid_txt.getText().equals("") && amount_txt.getText().equals("") && pay_date.getValue().equals("") && pay_mode.getSelectedItem().equals("Select Mode") && amtpaid_pay.getText().equals("")  && outst_pay.getText().equals("") && stat_pay.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Fields are already empty");
            editpay();
        }    
        else  {
        payid_txt.setText("");
        patientid_txt.setText("");
        amount_txt.setText("");
        //pay_date.setText("");
        pay_date.setValue(new Date());
        pay_mode.setSelectedItem("Select Mode");
        amtpaid_pay.setText("");
        outst_pay.setText("");
        stat_pay.setText("");
        editpay();
        }
    }
    private void new_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_payActionPerformed
        newBtnPay();
        
    }//GEN-LAST:event_new_payActionPerformed

    private void submit_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_payActionPerformed
        inputpay();
        pay_mode.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
        String selectedMode = (String) pay_mode.getSelectedItem();
        if (selectedMode.equals("Credit Card") || selectedMode.equals("Debit Card")) {
            // Show the card details panel
            jPanel8.setVisible(true);
        } else if(selectedMode.equals("UPI")){
            // Hide the card details panel
            jPanel9.setVisible(true);
        } else {
             jPanel8.setVisible(false);
             jPanel9.setVisible(false);
        }
    }
});
       
        
//        pay_mode.addActionListener(new ActionListener() {
//        public void actionPerformed(ActionEvent e) {
//        String selectedMode = (String) pay_mode.getSelectedItem();
//        if (selectedMode.equals("Credit Card") || selectedMode.equals("Debit Card")) {
//            // Show the card details panel
//            jPanel8.setVisible(true);
//        } else {
//            // Hide the card details panel
//            jPanel8.setVisible(false);
//        }
//    }
//});
    }//GEN-LAST:event_submit_payActionPerformed
    private void newbtnAppointment() {
        if(p_id.getText().equals("") && p_name_appoint.getText().equals("") && d_id.getText().equals("") && d_name_appoint.getText().equals("") && doc_special_app.getText().equals("") && app_id.getText().equals("") && appointment_type.getSelectedItem().equals("Select Appointment Type") && appointment_time.getText().equals("") && status_appoint.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Fields are already empty");
            editapp();
        }    
        else  {
        p_id.setText("");
        p_name_appoint.setText("");
        d_id.setText("");
        d_name_appoint.setText("");
        doc_special_app.setText("");        
        app_id.setText("");
        app_date.setValue(new Date());
        appointment_type.setSelectedItem("Select Appointment Type");
        appointment_time.setText("");
        status_appoint.setText("");
        editapp();
        }
    }
    private void new_appActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_appActionPerformed
        newbtnAppointment();
    }//GEN-LAST:event_new_appActionPerformed

    private void submit_appActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_appActionPerformed
        
        inputapp();
        
    }//GEN-LAST:event_submit_appActionPerformed

    private void status_appointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status_appointActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_status_appointActionPerformed

    private void d_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_d_idActionPerformed

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        
    // Get the patient ID to search
    String patientId = id_txt.getText().trim();

    // Validate input
    if (patientId.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter a Patient ID to search.");
        return;
    }

    // Database connection details
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";

    try {
        // Establish a connection
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

        // SQL query to search for patient data by ID
        String sql = "SELECT * FROM Patient WHERE patient_id = ?";
        
        // Create a prepared statement
        PreparedStatement pstmt = conn.prepareStatement(sql);
        
        // Set the parameter for the query
        pstmt.setInt(1, Integer.parseInt(patientId));
        
        // Execute the query
        ResultSet rs = pstmt.executeQuery();
        
        // Check if a record is found
        if (rs.next()) {
            // Populate form fields with data from the database
            P_name_txt.setText(rs.getString("name"));
            
            String gender = rs.getString("gender");
            if (gender.equals("Male")) {
                male_btn.setSelected(true);
            } else if (gender.equals("Female")) {
                female_btn.setSelected(true);
            } else if (gender.equals("Other")) {
                other_btn.setSelected(true);
            }
            
            age_txt.setText(String.valueOf(rs.getInt("age")));
            address_txt.setText(rs.getString("address"));
            phone_txt.setText(rs.getString("phone_no"));
            email_txt.setText(rs.getString("email_id"));
            mhis_txt.setText(rs.getString("medical_history"));
            rgdate_txt.setText(rs.getString("registration_date"));

            JOptionPane.showMessageDialog(null, "Record found!");
            
        } else {
            JOptionPane.showMessageDialog(null, "No record found with Patient ID: " + patientId);
            
        }

        // Close the ResultSet and PreparedStatement
        rs.close();
        pstmt.close();
        
        // Close the connection
        conn.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error retrieving data: " + e.getMessage());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid Patient ID format. Please enter a numeric value.");
    }

    }//GEN-LAST:event_search_btnActionPerformed

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
       
   if (id_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter the Patient ID to delete.");
    } else {
        // Confirm delete action with the user
        int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        
        if (response == JOptionPane.YES_OPTION) {
            // Database connection details
            String DB_URL = "jdbc:mysql://localhost:3306/hospital";
            String USER = "root";
            String PASSWORD = "Jp#@7325";

            try {
                // Establish a connection
                Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

                // SQL delete statement
                String sql = "DELETE FROM Patient WHERE patient_id = ?";

                // Create a prepared statement
                PreparedStatement pstmt = conn.prepareStatement(sql);

                // Set the parameter for the query
                pstmt.setInt(1, Integer.parseInt(id_txt.getText())); // Assuming id_txt is a text field for patient_id

                // Execute the delete command
                int rowsAffected = pstmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Record Deleted Successfully");
                    newloginpatient();
                    //clearFields();  // Optional: Clear input fields after deletion
                   // return true;
                } else {
                    JOptionPane.showMessageDialog(null, "No record found with the given Patient ID.");
                }

                // Close the connection
                pstmt.close();
                conn.close();

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid Patient ID format. Please enter a valid number.");
            }
        }
    
//    return false;
}
    }//GEN-LAST:event_delete_btnActionPerformed

    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed

        
    rgdate_txt.setText("" + ld);

    // Validate input fields
    if (id_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Your Id.");
    } else if (P_name_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Your Name.");
    } else if (!male_btn.isSelected() && !female_btn.isSelected() && !other_btn.isSelected()) {
        JOptionPane.showMessageDialog(null, "Please Select your gender.");
    } else if (age_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Age.");
    } else if (address_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Address.");
    } else if (phone_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Phone No.");
    } else if (email_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Email-ID.");
    } else if (mhis_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please tell your medical history.");
    } else if (rgdate_txt.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter registration date.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL update statement
            String sql = "UPDATE Patient SET name = ?, gender = ?, age = ?, address = ?, phone_no = ?, email_id = ?, medical_history = ?, registration_date = ? WHERE patient_id = ?";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameters for the query
            pstmt.setString(1, P_name_txt.getText());
            
            // Determine which radio button is selected for gender
            String gender = "";
            if (male_btn.isSelected()) {
                gender = "Male";
            } else if (female_btn.isSelected()) {
                gender = "Female";
            } else if (other_btn.isSelected()) {
                gender = "Other";
            }
            pstmt.setString(2, gender);
            
            pstmt.setInt(3, Integer.parseInt(age_txt.getText()));
            pstmt.setString(4, address_txt.getText());
            pstmt.setString(5, phone_txt.getText());
            pstmt.setString(6, email_txt.getText());
            pstmt.setString(7, mhis_txt.getText());
            pstmt.setString(8, rgdate_txt.getText());
            pstmt.setInt(9, Integer.parseInt(id_txt.getText())); // Assuming id_txt is a text field for patient_id

            // Execute the update command
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Updated Successfully");
                
 //               return true;
            }

            // Close the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating data: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input format. Please check your data.");
        }
    }
//    return false;

    }//GEN-LAST:event_update_btnActionPerformed
    private void newloginpatient(){
        if(id_txt.getText().equals("") && P_name_txt.getText().equals("") && age_txt.getText().equals("") && address_txt.getText().equals("") && phone_txt.getText().equals("") && email_txt.getText().equals("") && mhis_txt.getText().equals("") && rgdate_txt.getText().equals(""+ld)){
            JOptionPane.showMessageDialog(null, "Fields are already empty");
        }    
        else  {
        id_txt.setText("");
        P_name_txt.setText("");
        male_btn.setSelected(false);
        female_btn.setSelected(false);
        other_btn.setSelected(false);
        age_txt.setText("");
        address_txt.setText("");
        phone_txt.setText("");
        email_txt.setText("");
        mhis_txt.setText("");
        rgdate_txt.setText("" +ld);
        editlogin();
        }
    }
    private void new_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_btnActionPerformed
        newloginpatient();
    }//GEN-LAST:event_new_btnActionPerformed
    
    private void submit_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_btnActionPerformed
        saveRecord();
        
    }//GEN-LAST:event_submit_btnActionPerformed

    private void rgdate_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgdate_txtActionPerformed

    }//GEN-LAST:event_rgdate_txtActionPerformed

    private void patreg_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patreg_btnActionPerformed
        jTabbedPane1.setSelectedIndex(4);
    }//GEN-LAST:event_patreg_btnActionPerformed

    private void appser_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appser_btnActionPerformed
        jTabbedPane1.setSelectedIndex(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_appser_btnActionPerformed

    private void bill_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bill_btnActionPerformed
        jTabbedPane1.setSelectedIndex(2);
        // TODO add your handling code here:
    }//GEN-LAST:event_bill_btnActionPerformed

    private void update_appActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_appActionPerformed
        
      if (p_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient Id.");
    } else if (p_name_appoint.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Patient Name.");
    } else if (d_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor Id.");
    } else if (d_name_appoint.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor Name.");
    } else if (doc_special_app.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor Specialization.");
    } else if (app_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Appointment Id.");
    } else if (appointment_type.getSelectedItem().equals("Select Appointment Type")) {
        JOptionPane.showMessageDialog(null, "Please Select Appointment Type.");
    } else if (appointment_time.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Appointment Time.");
    } else if (!validateTimeFormat(appointment_time.getText())) {
        JOptionPane.showMessageDialog(null, "Please enter time in HH:MM:SS format.");
    } else if (status_appoint.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Status of Appointment.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL update statement
            String sql = "UPDATE Appointment SET patient_id = ?, patient_name = ?, doctor_id = ?, doctor_name = ?, specialization = ?, appointment_date = ?, appointment_type = ?, appointment_time = ?, status = ? WHERE appointment_id = ?";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameters for the update query
            pstmt.setInt(1, Integer.parseInt(p_id.getText())); // Patient ID
            pstmt.setString(2, p_name_appoint.getText()); // Patient Name
            pstmt.setInt(3, Integer.parseInt(d_id.getText())); // Doctor ID
            pstmt.setString(4, d_name_appoint.getText()); // Doctor Name
            pstmt.setString(5, doc_special_app.getText()); // Specialization
            
            // Convert the appointment_date from Spinner to java.sql.Date
            java.util.Date utilDate = (java.util.Date)app_date.getValue();
            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
            pstmt.setDate(6, sqlDate); // Appointment Date

            pstmt.setString(7, appointment_type.getSelectedItem().toString()); // Appointment Type
            pstmt.setString(8, appointment_time.getText()); // Appointment Time
            pstmt.setString(9, status_appoint.getText()); // Status
            
            // Set the appointment_id for the WHERE clause
            pstmt.setInt(10, Integer.parseInt(app_id.getText())); // Appointment ID

            // Execute the update command
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Updated Successfully");
                newbtnAppointment();
                // Call the method to clear the fields or update the UI
            } else {
                JOptionPane.showMessageDialog(null, "No Record Found with Given Appointment ID");
            }

            // Close the statement and the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating data: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid numbers for IDs.");
        }
    }

    }//GEN-LAST:event_update_appActionPerformed

    private void delete_appActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_appActionPerformed
       
    if (app_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Appointment Id to Delete.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL delete statement
            String sql = "DELETE FROM Appointment WHERE appointment_id = ?";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameter for the query (appointment_id)
            pstmt.setInt(1, Integer.parseInt(app_id.getText())); // Appointment ID

            // Show confirmation dialog before deletion
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this appointment?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
            
            if (confirm == JOptionPane.YES_OPTION) {
                // Execute the delete command
                int rowsAffected = pstmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Record Deleted Successfully");
                    newbtnAppointment();  // Refresh or clear the form
                            
                } else {
                    JOptionPane.showMessageDialog(null, "No Record Found with Given Appointment ID");
                }
            }

            // Close the statement and the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid Appointment ID.");
        }
    }

    }//GEN-LAST:event_delete_appActionPerformed

    private void search_appActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_appActionPerformed
       
    String searchAppointmentId = app_id.getText().trim();

    if (searchAppointmentId.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter a Appointment ID to search.");
        return;
    }
    
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";

    try {
        
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
        
        String sql = "SELECT * FROM Appointment WHERE appointment_id=?";
        
        PreparedStatement pstmt = conn.prepareStatement(sql);

        
        pstmt.setInt(1, Integer.parseInt(searchAppointmentId));
        
        ResultSet rs = pstmt.executeQuery();

        
        if (rs.next()) {
            
            p_id.setText(String.valueOf(rs.getInt("patient_id")));
            p_name_appoint.setText(rs.getString("patient_name"));
            d_id.setText(String.valueOf(rs.getInt("doctor_id")));
            d_name_appoint.setText(rs.getString("doctor_name"));
            doc_special_app.setText(rs.getString("specialization"));
            app_id.setText(String.valueOf(rs.getInt("appointment_id")));

           
            java.sql.Date sqlDate = rs.getDate("appointment_date");
            app_date.setValue(new java.util.Date(sqlDate.getTime()));

            appointment_type.setSelectedItem(rs.getString("appointment_type"));
            appointment_time.setText(rs.getString("appointment_time"));
            status_appoint.setText(rs.getString("status"));

            JOptionPane.showMessageDialog(null, "Record Found and Loaded Successfully");
            
        } else {
            JOptionPane.showMessageDialog(null, "No Record Found with Given Criteria");
        }

        
        rs.close();
        pstmt.close();
        conn.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error searching data: " + e.getMessage());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please enter valid numbers for IDs.");
    }

    }//GEN-LAST:event_search_appActionPerformed

    private void heal_recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heal_recordActionPerformed
       jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_heal_recordActionPerformed

    private void exit_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_btnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit_btnActionPerformed

    private void submit_staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_staffActionPerformed
        inputstaff();
        
    }//GEN-LAST:event_submit_staffActionPerformed
    private void newBtnStaff() {
        if(doctor_id.getText().equals("") && doctor_name.getText().equals("") && doctor_role.getText().equals("") && doctor_dept.getText().equals("") && doctor_cont.getText().equals("") && doctor_experience.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Fields are already empty");
        }    
        else  {
        doctor_id.setText("");
        doctor_name.setText("");
        doctor_role.setText("");
        doctor_dept.setText("");
        doctor_cont.setText("");
        doctor_experience.setText("");
        }
    }
    private void new_staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_staffActionPerformed
        newBtnStaff();
    }//GEN-LAST:event_new_staffActionPerformed

    private void staff_recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_recordActionPerformed
       jTabbedPane1.setSelectedIndex(3);
        
    }//GEN-LAST:event_staff_recordActionPerformed

    private void update_staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_staffActionPerformed

    if (doctor_id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor ID.");
    } else if (doctor_name.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Name.");
    } else if (doctor_role.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Role.");
    } else if (doctor_dept.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Department.");
    } else if (doctor_cont.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Contact.");
    } else if (doctor_experience.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Staff Experience.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL update statement
            String sql = "UPDATE Doctor SET name = ?, role = ?, department = ?, contact = ?, experience = ? WHERE doctor_id = ?";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameters for the query
            pstmt.setString(1, doctor_name.getText()); // Staff Name
            pstmt.setString(2, doctor_role.getText()); // Staff Role
            pstmt.setString(3, doctor_dept.getText()); // Department
            pstmt.setString(4, doctor_cont.getText()); // Staff Contact
            pstmt.setString(5, doctor_experience.getText()); // Staff Experience
            pstmt.setInt(6, Integer.parseInt(doctor_id.getText())); // Doctor ID

            // Execute the update command
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Record Updated Successfully");
                newBtnStaff();
                 
            } else {
                JOptionPane.showMessageDialog(null, "Record Not Found");
            }

            
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating data: " + e.getMessage());
        }
    }


    }//GEN-LAST:event_update_staffActionPerformed

    private void update_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_healthActionPerformed
        
    if (id_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Health Record Id.");
        return;
    }

    // Database connection details
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";

    try {
        // Establish a connection to the database
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

        // SQL update statement
        String sql = "UPDATE HealthRecord SET doctor_id = ?, patient_name = ?, patient_age = ?, follow_up_date = ?, symptoms = ?, treatment = ?, allergies = ?, vital_signs = ?, status = ? WHERE record_id = ?";

        // Create a prepared statement
        PreparedStatement pstmt = conn.prepareStatement(sql);

        // Set the parameters for the query
        pstmt.setInt(1, Integer.parseInt(doctor_id_health.getText())); // Doctor ID
        pstmt.setString(2, patient_name_health.getText()); // Patient Name
        pstmt.setInt(3, Integer.parseInt(patient_age_health.getText())); // Patient Age
        pstmt.setString(4, follow_date_health.getText()); // Follow-up Date
        pstmt.setString(5, symptoms_health.getText()); // Symptoms
        pstmt.setString(6, treat_health.getText()); // Treatment
        pstmt.setString(7, allergies_health.getText()); // Allergies
        pstmt.setString(8, vital_signs_health.getText()); // Vital Signs
        pstmt.setString(9, status_health_record.getText()); // Status
        pstmt.setInt(10, Integer.parseInt(id_health.getText())); // Health Record ID

        // Execute the update command
        int rowsAffected = pstmt.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Record Updated Successfully.");
            newBtnHealth();
        } else {
            JOptionPane.showMessageDialog(null, "No Record Found with the provided ID.");
        }

        // Close the statement and the connection
        pstmt.close();
        conn.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error updating data: " + e.getMessage());
    }

    }//GEN-LAST:event_update_healthActionPerformed

    private void submit_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_healthActionPerformed
        inputhealth();
    }//GEN-LAST:event_submit_healthActionPerformed
    private void newBtnHealth()  {
        
        if(id_health.getText().equals("") && doctor_id_health.getText().equals("") && patient_name_health.getText().equals("") && patient_age_health.getText().equals("") && follow_date_health.getText().equals("") && symptoms_health.getText().equals("") && treat_health.getText().equals("") && allergies_health.getText().equals("") && vital_signs_health.getText().equals("") && status_health_record.getText().equals(""))
            JOptionPane.showMessageDialog(null, "Fields are already empty");
        else {   
        
        id_health.setText("");
        doctor_id_health.setText("");
        patient_name_health.setText("");
        patient_age_health.setText(""); 
        follow_date_health.setText("");        
        symptoms_health.setText("");   
        treat_health.setText("");
        allergies_health.setText(""); 
        vital_signs_health.setText("");
        status_health_record.setText("");        
        }
        
    }
    private void new_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_healthActionPerformed
        newBtnHealth();
    }//GEN-LAST:event_new_healthActionPerformed

    private void invent_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invent_btnActionPerformed
        jTabbedPane1.setSelectedIndex(5);
    }//GEN-LAST:event_invent_btnActionPerformed
//    private void paybtn(){
//      else if (pay_id_card.getText().equals("")) { 
//         JOptionPane.showMessageDialog(null, "Please Enter Card Payment Id."); 
//    } else if (card_type.getText().equals("")) {
//        JOptionPane.showMessageDialog(null, "Please Enter card type.");
//    } else if (name_card.getText().equals("")) {
//        JOptionPane.showMessageDialog(null, "Please Enter your name.");
//    } else if (card_no.getText().equals("")) {
//        JOptionPane.showMessageDialog(null, "Please Enter Card No.");
//    } else if (cvv_no.getText().equals("")) {
//        JOptionPane.showMessageDialog(null, "Please Enter CVV No.");
//    } else if (expiry_date.getText().equals("")) {
//        JOptionPane.showMessageDialog(null, "Please Enter Expiry Date.");
//    }  else if (payc_id.getText().equals("")) {
//        JOptionPane.showMessageDialog(null, "Please Enter Payment Id.");  
//    } else {
//        // Database connection details
//        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
//        String USER = "root";
//        String PASSWORD = "Jp#@7325";
//
//        try {
//            // Establish connection
//            Connection con = DriverManager.getConnection(DB_URL, USER, PASSWORD);
//
//            // SQL query to insert payment data
//            String sql = "INSERT INTO payment (card_payment_id, card_type, name_on_card, card_no, cvv_no, expiry_date,payment_id) VALUES (?, ?, ?, ?, ?, ?, ?)";
//            
//            // Prepare the statement
//            PreparedStatement pst = con.prepareStatement(sql);
//            
//            // Set the values from the form
//            pst.setInt(1, Integer.parseInt(pay_id_card.getText()));
//            pst.setString(2, card_type.getText());
//            pst.setString(3, name_card.getText());
//            pst.setString(4, card_no.getText());
//            pst.setString(5, cvv_no.getText());
//            pst.setString(6, expiry_date.getText());
//            pst.setInt(7, Integer.parseInt(payc_id.getText()));
//            
//            // Execute the query
//            int rowsInserted = pst.executeUpdate();
//            if (rowsInserted > 0) {
//                JOptionPane.showMessageDialog(null, "Payment done Successfully");
//                jPanel8.setVisible(false); // Assuming this hides the payment panel
//            } 
//            pst.close();
//            con.close();
//        } catch (SQLException e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
//        } 
//    }
//    }
    private void pay_cardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pay_cardActionPerformed
     // paybtn();
      JOptionPane.showMessageDialog(null, "Payment done Successfully");
      

    }//GEN-LAST:event_pay_cardActionPerformed
    
    private void pay_modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pay_modeActionPerformed
        if(pay_mode.getSelectedItem().equals("Cash")){
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        }    
    else if(pay_mode.getSelectedItem().equals("Credit Card"))
        jPanel8.setVisible(true);
    else if(pay_mode.getSelectedItem().equals("Debit Card"))
        jPanel8.setVisible(true);
    else if(pay_mode.getSelectedItem().equals("UPI")){
         jPanel8.setVisible(false);
        jPanel9.setVisible(true);
    }
    else {
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        }
    }//GEN-LAST:event_pay_modeActionPerformed

    private void done_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_done_payActionPerformed
        JOptionPane.showMessageDialog(null, "Payment done Successfully");

        jPanel9.setVisible(false);
    }//GEN-LAST:event_done_payActionPerformed

    private void submit_medActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_medActionPerformed
        inputinventory();
    }//GEN-LAST:event_submit_medActionPerformed
    private void newBtnInventory() {
        if(id_med.getText().equals("") && item_med.getText().equals("") && categ_invent.getText().equals("") && manufact_invent.getText().equals("") && quant_med.getText().equals("") && supplier_med.getText().equals("") && cost_med.getText().equals("") && status_med.getText().equals("") && lastup_med.getText().equals("")) 
            JOptionPane.showMessageDialog(null, "Fields are already empty");
        else {
            id_med.setText("");
            item_med.setText("");
            categ_invent.setText("");
            manufact_invent.setText("");
            quant_med.setText("");
            supplier_med.setText("");
            cost_med.setText("");
            status_med.setText("");
            lastup_med.setText("");  
        }    
    }
    private void new_medActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_medActionPerformed
        newBtnInventory();
        
    }//GEN-LAST:event_new_medActionPerformed

    private void d_name_appointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d_name_appointActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_d_name_appointActionPerformed

    private void doc_special_appActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_special_appActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doc_special_appActionPerformed

    private void appointment_timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointment_timeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appointment_timeActionPerformed

    private void search_staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_staffActionPerformed
      String searchDoctorId=doctor_id.getText().trim();
    
    if (searchDoctorId.equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor ID to Search.");
        return;
    } 
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL select statement
            String sql = "SELECT * FROM Doctor WHERE doctor_id = ?";
            
            
            PreparedStatement pstmt = conn.prepareStatement(sql);

            
//            pstmt.setInt(1, doctor_id.getText().isEmpty() ? 0 : Integer.parseInt(doctor_id.getText())); // Doctor ID, 0 if not entered
//            pstmt.setString(2, "%" + staff_name.getText() + "%"); // Name (partial match)
            pstmt.setInt(1, Integer.parseInt(searchDoctorId));
            // Execute the select query
            ResultSet rs = pstmt.executeQuery();

            // Check if any records were found
            if(rs.next()) {
                    
                    doctor_name.setText(rs.getString("name"));
                    doctor_role.setText(rs.getString("role"));
                    doctor_dept.setText(rs.getString("department"));
                    doctor_cont.setText(rs.getString("contact"));
                    doctor_experience.setText(String.valueOf(rs.getString("experience")));
                    
                JOptionPane.showMessageDialog(null, "Record Found!");
            }
            else {
                JOptionPane.showMessageDialog(null, "No record found with Patient ID: " + searchDoctorId);
                        
                  }        
                 
            rs.close();
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error retrieving data: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Doctor ID format.Please enter a valid Doctor ID.");
        }
    



    }//GEN-LAST:event_search_staffActionPerformed

    private void delete_staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_staffActionPerformed
      String searchDoctorId=doctor_id.getText().trim();
      
    if (searchDoctorId.equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Doctor ID to Delete.");
    } else {
        // Database connection details
        String DB_URL = "jdbc:mysql://localhost:3306/hospital";
        String USER = "root";
        String PASSWORD = "Jp#@7325";

        try {
            // Establish a connection to the database
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

            // SQL delete statement
            String sql = "DELETE FROM Doctor WHERE doctor_id = ?";

            // Create a prepared statement
            PreparedStatement pstmt = conn.prepareStatement(sql);

            // Set the parameter for the query
            pstmt.setInt(1, Integer.parseInt(searchDoctorId)); // Doctor ID

            // Confirm delete action
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this doctor?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Execute the delete command
                int rowsAffected = pstmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Record Deleted Successfully");
                    newBtnStaff(); // Call the method to reset the form or update the UI
                     // Refresh UI after deletion
                } else {
                    JOptionPane.showMessageDialog(null, "No record found with the provided Doctor ID.");
                }
            }

            // Close the statement and the connection
            pstmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid Doctor ID.");
        }
    }

    }//GEN-LAST:event_delete_staffActionPerformed

    private void patient_name_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_name_healthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patient_name_healthActionPerformed

    private void patient_age_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_age_healthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patient_age_healthActionPerformed

    private void follow_date_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_follow_date_healthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_follow_date_healthActionPerformed

    private void status_health_recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status_health_recordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_status_health_recordActionPerformed

    private void doctor_id_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctor_id_healthActionPerformed

    }//GEN-LAST:event_doctor_id_healthActionPerformed

    private void search_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_healthActionPerformed
        
    
    if (id_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Health Record Id.");
        return;
    }

    // Database connection details
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";

    try {
        // Establish a connection to the database
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

        // SQL select statement to search for the health record
        String sql = "SELECT * FROM HealthRecord WHERE record_id = ?";

        // Create a prepared statement
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, Integer.parseInt(id_health.getText())); // Health Record ID

        // Execute the query and get the result set
        ResultSet rs = pstmt.executeQuery();

        if (rs.next()) {
            // Populate fields with retrieved data
            doctor_id_health.setText(rs.getString("doctor_id"));
            patient_name_health.setText(rs.getString("patient_name"));
            patient_age_health.setText(rs.getString("patient_age"));
            follow_date_health.setText(rs.getString("follow_up_date"));
            symptoms_health.setText(rs.getString("symptoms"));
            treat_health.setText(rs.getString("treatment"));
            allergies_health.setText(rs.getString("allergies"));
            vital_signs_health.setText(rs.getString("vital_signs"));
            status_health_record.setText(rs.getString("status"));

            JOptionPane.showMessageDialog(null, "Record Found and Displayed.");
            
        } else {
            JOptionPane.showMessageDialog(null, "No Record Found with the provided ID.");
        }

        // Close the result set, statement, and the connection
        rs.close();
        pstmt.close();
        conn.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage());
    }

    }//GEN-LAST:event_search_healthActionPerformed

    private void delete_healthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_healthActionPerformed
        
    if (id_health.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Health Record Id to Delete.");
        return;
    }

    // Database connection details
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";

    try {
        // Establish a connection to the database
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);

        // SQL delete statement
        String sql = "DELETE FROM HealthRecord WHERE record_id = ?";

        // Create a prepared statement
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, Integer.parseInt(id_health.getText())); // Health Record ID

        // Execute the delete command
        int rowsAffected = pstmt.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Record Deleted Successfully.");
            newBtnHealth();
        } else {
            JOptionPane.showMessageDialog(null, "No Record Found with the provided ID.");
        }

        // Close the statement and the connection
        pstmt.close();
        conn.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage());
    }

    }//GEN-LAST:event_delete_healthActionPerformed

    private void search_medActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_medActionPerformed
        
    String medicineID = id_med.getText();

    if (medicineID.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter Medicine ID to search.");
        return;
    }

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", "Jp#@7325");
        
        String sql = "SELECT * FROM Inventory WHERE medicine_id = ?";
        
        PreparedStatement pstmt = conn.prepareStatement(sql);
        
        pstmt.setString(1, medicineID);

        ResultSet rs = pstmt.executeQuery();
        
        if (rs.next()) {
            // Display the data in your text fields
            item_med.setText(rs.getString("medicine_name"));
            categ_invent.setText(rs.getString("category"));
            manufact_invent.setText(rs.getString("manufacturer"));
            quant_med.setText(rs.getString("quantity"));
            supplier_med.setText(rs.getString("supplier"));
            cost_med.setText(rs.getString("price_per_packet"));
            status_med.setText(rs.getString("status"));
            lastup_med.setText(rs.getString("last_updated_stock_date"));
            
            JOptionPane.showMessageDialog(null, "Record Found and Displayed.");
        } else {
            JOptionPane.showMessageDialog(null, "No record found with the provided Medicine ID.");
        }
        
        rs.close();
        pstmt.close();
        conn.close();
    } catch (SQLException e) {
         e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error searching inventory data: " + e.getMessage());
    }

    }//GEN-LAST:event_search_medActionPerformed

    private void update_medActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_medActionPerformed
    

    if (id_med.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please Enter Inventory Id.");
        return;
    }

    // Database connection details
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";{

        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
            
            String sql = "UPDATE Inventory SET medicine_name = ?, category = ?, manufacturer = ?, quantity = ?, supplier = ?, price_per_packet = ?, status = ?, last_updated_stock_date = ? WHERE medicine_id = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, item_med.getText());
            pstmt.setString(2, categ_invent.getText());
            pstmt.setString(3, manufact_invent.getText());
            pstmt.setInt(4, Integer.parseInt(quant_med.getText()));
            pstmt.setString(5, supplier_med.getText());
            pstmt.setDouble(6, Double.parseDouble(cost_med.getText()));
            pstmt.setString(7, status_med.getText());
            pstmt.setString(8, lastup_med.getText());
            pstmt.setString(9, id_med.getText());

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Inventory record updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "No record found with the provided Medicine ID.");
            }
            
            pstmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            
            JOptionPane.showMessageDialog(null, "Error updating inventory data: " + e.getMessage());
        }
    }

    }//GEN-LAST:event_update_medActionPerformed

    private void delete_medActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_medActionPerformed
        
    String medicineID = id_med.getText();

    if (medicineID.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter Medicine ID to delete.");
        return;
    }
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";


    int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
    if (confirmation == JOptionPane.YES_OPTION) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
            
            String sql = "DELETE FROM Inventory WHERE medicine_id = ?";
            
            PreparedStatement pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, medicineID);

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Inventory record deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "No record found with the provided Medicine ID.");
            }
            
            pstmt.close();
            conn.close();
            
        } catch (SQLException e) {
        e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error deleting inventory data: " + e.getMessage());
        }
    }

    }//GEN-LAST:event_delete_medActionPerformed

    private void del_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del_payActionPerformed
        String paymentId=payid_txt.getText();
        
        if (paymentId.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter Payment ID to delete.");
        return;
    }
    String DB_URL = "jdbc:mysql://localhost:3306/hospital";
    String USER = "root";
    String PASSWORD = "Jp#@7325";


    int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
    if (confirmation == JOptionPane.YES_OPTION) {
    
        try {
        Connection con = DriverManager.getConnection(DB_URL, USER, PASSWORD);
        String query = "DELETE FROM Payment WHERE payment_id = ?";
        
        PreparedStatement pst = con.prepareStatement(query);

        pst.setInt(1, Integer.parseInt(payid_txt.getText()));

        int rowsDeleted = pst.executeUpdate();
        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(null, "Record Deleted Successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Record Not Found!");
        }

        pst.close();
        con.close();
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage());
          }
       }
    }//GEN-LAST:event_del_payActionPerformed

    private void search_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_payActionPerformed
       String paymentID = payid_txt.getText();

    if (paymentID.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter Medicine ID to search.");
        return;
    }

    try {
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", "Jp#@7325");
        
        String query = "SELECT * FROM Payment WHERE payment_id = ?";
        
        PreparedStatement pst = con.prepareStatement(query);

        pst.setInt(1, Integer.parseInt(payid_txt.getText()));
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            patientid_txt.setText(rs.getString("patient_id"));
            amount_txt.setText(rs.getString("amount"));
            java.sql.Date sqlDate = rs.getDate("payment_date");
            pay_date.setValue(new java.util.Date(sqlDate.getTime()));
            pay_mode.setSelectedItem(rs.getString("payment_mode"));
            amtpaid_pay.setText(rs.getString("amount_paid"));
            outst_pay.setText(rs.getString("outstanding_balance"));
            stat_pay.setText(rs.getString("status"));
        JOptionPane.showMessageDialog(null, "Record Found and Displayed.");
        } else {
            JOptionPane.showMessageDialog(null, "No record found with the provided Payment ID.");
        }

        rs.close();
        pst.close();
        con.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error retrieving data: " + e.getMessage());
    }

    }//GEN-LAST:event_search_payActionPerformed

    private void jLabel77MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel77MouseClicked
        setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel77MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Date_of_inventory;
    private javax.swing.JTextField P_name_txt;
    private javax.swing.JTextArea address_txt;
    private javax.swing.JTextField age_txt;
    private javax.swing.JTextArea allergies_health;
    private javax.swing.JTextField amount_txt;
    private javax.swing.JTextField amtpaid_pay;
    private javax.swing.JSpinner app_date;
    private javax.swing.JTextField app_id;
    private javax.swing.JTextField appointment_time;
    private javax.swing.JComboBox<String> appointment_type;
    private javax.swing.JButton appser_btn;
    private javax.swing.JButton bill_btn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField card_no;
    private javax.swing.JTextField card_type;
    private javax.swing.JTextField categ_invent;
    private javax.swing.JTextField cost_med;
    private javax.swing.JTextField cvv_no;
    private javax.swing.JTextField d_id;
    private javax.swing.JTextField d_name_appoint;
    private javax.swing.JTextField date_of_record;
    private javax.swing.JButton del_pay;
    private javax.swing.JButton delete_app;
    private javax.swing.JButton delete_btn;
    private javax.swing.JButton delete_health;
    private javax.swing.JButton delete_med;
    private javax.swing.JButton delete_staff;
    private javax.swing.JTextField doc_special_app;
    private javax.swing.JTextField doctor_cont;
    private javax.swing.JTextField doctor_dept;
    private javax.swing.JTextField doctor_experience;
    private javax.swing.JTextField doctor_id;
    private javax.swing.JTextField doctor_id_health;
    private javax.swing.JTextField doctor_name;
    private javax.swing.JTextField doctor_role;
    private javax.swing.JButton done_pay;
    private javax.swing.JTextField email_txt;
    private javax.swing.JButton exit_btn;
    private javax.swing.JTextField expiry_date;
    private javax.swing.JRadioButton female_btn;
    private javax.swing.JTextField follow_date_health;
    private javax.swing.JButton heal_record;
    private javax.swing.JTextField id_health;
    private javax.swing.JTextField id_med;
    private javax.swing.JTextField id_txt;
    private javax.swing.JButton invent_btn;
    private javax.swing.JTextField item_med;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTextField lastup_med;
    private javax.swing.JRadioButton male_btn;
    private javax.swing.JTextField manufact_invent;
    private javax.swing.JTextArea mhis_txt;
    private javax.swing.JTextField name_card;
    private javax.swing.JButton new_app;
    private javax.swing.JButton new_btn;
    private javax.swing.JButton new_health;
    private javax.swing.JButton new_med;
    private javax.swing.JButton new_pay;
    private javax.swing.JButton new_staff;
    private javax.swing.JRadioButton other_btn;
    private javax.swing.JTextField outst_pay;
    private javax.swing.JTextField p_id;
    private javax.swing.JTextField p_name_appoint;
    private javax.swing.JTextField patient_age_health;
    private javax.swing.JTextField patient_name_health;
    private javax.swing.JTextField patientid_txt;
    private javax.swing.JButton patreg_btn;
    private javax.swing.JButton pay_card;
    private javax.swing.JSpinner pay_date;
    private javax.swing.JTextField pay_id_card;
    private javax.swing.JComboBox<String> pay_mode;
    private javax.swing.JTextField payc_id;
    private javax.swing.JTextField payid_txt;
    private javax.swing.JTextField phone_txt;
    private javax.swing.JTextField quant_med;
    private javax.swing.JTextField rgdate_txt;
    private javax.swing.JButton search_app;
    private javax.swing.JButton search_btn;
    private javax.swing.JButton search_health;
    private javax.swing.JButton search_med;
    private javax.swing.JButton search_pay;
    private javax.swing.JButton search_staff;
    private javax.swing.JLabel sl2;
    private javax.swing.JLabel sl3;
    private javax.swing.JLabel sl4;
    private javax.swing.JLabel sl5;
    private javax.swing.JLabel sl6;
    private javax.swing.JButton staff_record;
    private javax.swing.JTextField stat_pay;
    private javax.swing.JTextField status_appoint;
    private javax.swing.JTextField status_health_record;
    private javax.swing.JTextField status_med;
    private javax.swing.JButton submit_app;
    private javax.swing.JButton submit_btn;
    private javax.swing.JButton submit_health;
    private javax.swing.JButton submit_med;
    private javax.swing.JButton submit_pay;
    private javax.swing.JButton submit_staff;
    private javax.swing.JTextField supplier_med;
    private javax.swing.JTextArea symptoms_health;
    private javax.swing.JTextArea treat_health;
    private javax.swing.JButton update_app;
    private javax.swing.JButton update_btn;
    private javax.swing.JButton update_health;
    private javax.swing.JButton update_med;
    private javax.swing.JButton update_pay;
    private javax.swing.JButton update_staff;
    private javax.swing.JTextArea vital_signs_health;
    // End of variables declaration//GEN-END:variables
}
